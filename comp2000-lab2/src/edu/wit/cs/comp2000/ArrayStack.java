package edu.wit.cs.comp2000;import java.util.EmptyStackException;import java.util.Arrays;/**    A class of stacks whose entries are stored in an array.    The array is filled in from right to left, and cannot    be resized. */public class ArrayStack<T> implements StackInterface<T>{	private T[] stack;    // Array of stack entries	private int topIndex; // Index of top entry	private boolean initialized;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;	public ArrayStack() {		this(DEFAULT_CAPACITY);	} // end default constructor	public ArrayStack(int initialCapacity) {		checkCapacity(initialCapacity);		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempStack = (T[])new Object[initialCapacity];		stack = tempStack;		topIndex = initialCapacity;		initialized = true;	} // end constructor	private void checkCapacity(int initialCapacity) {		if (initialCapacity == 0)			throw new IllegalStateException();	}	@Override	public void push(T newEntry) {		checkInitialization();		if (topIndex == 0)			throw new SecurityException();		else			stack[--topIndex] = newEntry;	}	@Override	public T pop() {		checkInitialization();		if(isEmpty())			throw new EmptyStackException();		else {			T top = stack[topIndex];			stack[topIndex++] = null;			return top;		}	}	@Override	public T peek() {		checkInitialization();		if (isEmpty())			throw new EmptyStackException();		return stack[topIndex];	}	@Override	public boolean isEmpty() {		return topIndex == stack.length;	}	@Override	public void clear() {		if (isEmpty())			throw new EmptyStackException();		while(!isEmpty())			pop();	}	private void checkInitialization() {		if(!initialized) {			throw new SecurityException("ArrayStack object not initialized properly");		}	}} // end ArrayStack